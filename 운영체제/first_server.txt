#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <pthread.h>

#define BUF_SIZE 200
#define MAX_CLNT 512

void * handle_clnt(void * arg);
void send_msg(char * msg, int len, int index);
void error_handling(char * msg);

int clnt_cnt=0;
int clnt_socks[MAX_CLNT];
pthread_mutex_t mutx;

int main(int argc, char *argv[])
{
	int serv_sock, clnt_sock;
	int port;
	int clnt_index;
	struct sockaddr_in serv_adr, clnt_adr;
	int clnt_adr_sz;
	int param[2];
	pthread_t t_id;

	printf("Server Port : ");
	scanf("%d", &port);
  
	pthread_mutex_init(&mutx, NULL);
	serv_sock=socket(PF_INET, SOCK_STREAM, 0);

	memset(&serv_adr, 0, sizeof(serv_adr));
	serv_adr.sin_family=AF_INET; 
	serv_adr.sin_addr.s_addr=htonl(INADDR_ANY);
	serv_adr.sin_port=htons(port);
	
	if(bind(serv_sock, (struct sockaddr*) &serv_adr, sizeof(serv_adr))==-1)
		error_handling("bind() error");
	if(listen(serv_sock, 5)==-1)
		error_handling("listen() error");
	
	printf("open!! server\n");
	printf("Chatting on\n");	

	while(1)
	{
		clnt_adr_sz=sizeof(clnt_adr);
		clnt_sock=accept(serv_sock, (struct sockaddr*)&clnt_adr,&clnt_adr_sz);
		
		pthread_mutex_lock(&mutx);

		clnt_socks[clnt_cnt++]=clnt_sock;

		pthread_mutex_unlock(&mutx);

		param[1] = clnt_cnt;
		param[0] = clnt_sock;

		pthread_create(&t_id, NULL, handle_clnt, (void*)&param);
		pthread_detach(t_id);
		printf("connected to Client %d\n", clnt_cnt);
	}
	close(serv_sock);
	return 0;
}
	
void * handle_clnt(void * arg)
{
	int clnt_sock = ((int*)arg)[0];
	int index = ((int*)arg)[1];
	int str_len = 0, i;
	char msg[BUF_SIZE], initial[BUF_SIZE], sending_msg[BUF_SIZE];
	
	sprintf(initial, "Client %d has been connected!\n", index);
	send_msg(initial, strlen(initial), index);

	while((str_len=read(clnt_sock, msg, sizeof(msg)))!=0)
	{
		msg[str_len] = 0;
		printf("message from client %d : %s", index, msg);
		sprintf(sending_msg, "Client %d : %s", index, msg);
		send_msg(sending_msg, strlen(sending_msg), index);
	}
	
	pthread_mutex_lock(&mutx);
	for(i=0; i<clnt_cnt; i++)   // remove disconnected client
	{
		if(clnt_sock==clnt_socks[i])
		{
			while(i++<clnt_cnt-1)
				clnt_socks[i]=clnt_socks[i+1];
			break;
		}
	}
	clnt_cnt--;
	pthread_mutex_unlock(&mutx);
	close(clnt_sock);
	return NULL;
}
void send_msg(char * msg, int len, int index)   // send to all
{
	int i;
	pthread_mutex_lock(&mutx);
	for(i=0; i<clnt_cnt; i++){
		if(i != index-1)
			write(clnt_socks[i], msg, len);
	}
	pthread_mutex_unlock(&mutx);
}
void error_handling(char * msg)
{
	fputs(msg, stderr);
	fputc('\n', stderr);
	exit(1);
}
